/*
Package main GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package main

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Build) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Builder":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Builder, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Load the arg",
	}, true
}

func (v Builder) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Image":
			return []string{}, true
		case "Push":
			return []string{}, true
		case "ContainerRegistry":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Image, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ContainerRegistry) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Username":
			return []string{}, true
		case "Password":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Export) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Exporter":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Exporter, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Export the worklist as tar",
	}, true
}

func (v Exporter) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Image":
			return []string{}, true
		case "Output":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Image, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Image) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Context":
			return []string{}, true
		case "Tag":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}
