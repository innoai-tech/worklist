/*
Package jtd GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package jtd

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Any) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Any",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#empty-schemas",
	}, true
}

func (v Basic) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Basic",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#type-schemas",
	}, true
}

func (v Common) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Metadata":
			return []string{}, true
		case "Nullable":
			return []string{}, true
		case "Definitions":
			return []string{}, true
		case "ID":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Enum) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Enum":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Enum",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#enum-schemas",
	}, true
}

func (v List) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Elements":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"List",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#elements-schemas",
	}, true
}

func (v Map) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Values":
			return []string{}, true
		case "PropertyNames":
			return []string{
				"ex sames as json schema",
			}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Map",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#values-schemas",
	}, true
}

func (v Object) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Properties":
			return []string{}, true
		case "OptionalProperties":
			return []string{}, true
		case "AdditionalProperties":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Object",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#properties-schemas",
	}, true
}

func (v Ref) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Ref":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v TaggedUnion) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Discriminator":
			return []string{}, true
		case "Mapping":
			return []string{}, true
		case "Common":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Common, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"TaggedUnion",
		"https://jsontypedef.com/docs/jtd-in-5-minutes/#properties-schemas",
	}, true
}

func (Type) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
